<?php
/**
 * Calendar
 *
 * This calendar renders (at this point) an HTML month-view calendar with the
 * events passed to it. This is based on old code I wrote, and of course it would be
 * nice if this were Javascript; however, this works and looks pretty good actually.
 *
 * @author Organisation: Queen's University
 * @author Unit: School of Medicine
 * @author Developer: Matt Simpson <matt.simpson@queensu.ca>
 * @copyright Copyright 2010 Queen's University. All Rights Reserved.
 *
 */
class Entrada_Calendar {
    /**
     * Base URL used for navigation.
     * @var string
     */
    private $base_url = "";

    /**
     * Integer representation of the month (eg. 1 - 12)
     * @private int
     */
    private $month = 0;

    /**
     * Integer representation of the year (eg. 2006)
     * @private int
     */
    private $year = 0;

    /**
     * Array containing processed calendar events.
     * @private array
     */
    private $events = array();

    /**
     * Array containing unprocessed calendar events.
     * @private array
     */
    private $tmp_events = array();

    /**
     * Array containing the integer value and names of the days of the week.
     * @private array
     */
    private $days = array(0 => "Sun", 1 => "Mon", 2 => "Tues", 3 => "Wed", 4 => "Thurs", 5 => "Fri", 6 => "Sat");

    /**
     * Array containing the integer value and names of the months of the year.
     * @private array
     */
    private $months = array(1 => "Jan", 2 => "Feb", 3 => "Mar", 4 => "Apr", 5 => "May", 6 => "Jun", 7 => "Jul", 8 => "Aug", 9 => "Sept", 10 => "Oct", 11 => "Nov", 12 => "Dec");

    /**
     * Integer representation of the day of the week to start displaying. (eg. 0 = Sunday)
     * @private int
     */
    private $day_start = 0;

    /**
     * Integer representation of the day of the week to finish displaying. (eg. 6 = Saturday)
     * @private int
     */
    private $day_end = 6;

    /**
     * Array containing any error messages which were generated by the errorCheck function.
     * @private array
     */
    private $errormsg = array();

    /**
     * Valid PHP character set to run htmlentities as.
     * @private string
     */
    private $charset = "ISO-8859-1";

    /**
     *  Choose whether or not to display the calendar navigation.
     *  @private bool
     */
    private $show_nav = false;

    /**
     * Placeholder for the timestamp to work from.
     * @private int
     */
    private $timestamp = 0;

    /**
     * Holds which type of calendar to display.
     * @private string
     */
    private $cal_view = "month";

    /**
     * Holds Calss version number.
     * @private string
     */
    private $cal_version = "0.5";

    /**
     * Default constructor that does nothing at this point.
     * @return bool
     */
    public function __construct ($cal_view = "month") {
        switch ($cal_view) {
            case "month" :
            default :
                $this->cal_view = "month";
                break;
        }

        return true;
    }

    /**
     * Function which allows you to set the base URL that is used.
     *
     * @access public
     * @param bool $state
     * @return bool
     */
    public function setBaseUrl($base_url = false) {
        if (!$base_url) {
            $this->base_url = htmlentities($_SERVER["PHP_SELF"], ENT_QUOTES, $this->charset);
        } else {
            $this->base_url = $base_url;
        }
        return true;
    }

    public function setCharset($charset = "") {
        if ($charset) {
            $this->charset = $charset;
        }
    }

    /**
     * Adds a new event to the unprocessed events array. An example array with complete elements follows.
     *
     * $event = array();
     * $event["timestamp_start"] = (int) time();         // REQUIRED: Unix timestamp of the start of the event.
     * $event["timestamp_end"] = (int) (time() + 86400); // REQUIRED: Unix timestamp of the end of the event.
     * $event["calendar_id"] = (int) 1;                  // OPTIONAL: ID of the calendar this event appears in.
     * $event["event_id"] = "";                          // REQUIRED: Unique ID of the event.
     * $event["event_title"] = "";					     // REQUIRED: Title of the event.
     * $event["event_desc"] = "";                        // OPTIONAL: Event description that will appear onmouseover.
     * $event["event_link"] = "";                        // OPTIONAL: The link the user will go to if event is clicked.
     * $event["event_misc"] = array();                   // OPTIONAL: An array containing anything else you may need.
     * @access public
     * @param array $event
     * @return bool
     */
    public function newEvent($event = array()) {
        if (is_array($event) && count($event)) {
            $this->tmp_events[] = $event;

            return true;
        }

        return false;
    }

    /**
     * Function that allows you to clear any events which are being display. This is used if you would like
     * to display multiple calendars on one page. You need to reset the arrays before each calendar.
     *
     * @access public
     * @return bool
     */
    public function clearEvents() {
        unset($this->tmp_events, $this->events);

        return true;
    }

    /**
     * Function that allows you to say whether or the navigation is displayed.
     * @access public
     * @param bool $state
     * @return bool
     */
    public function showNavigation($state = true) {
        if ((bool) $state) {
            $this->show_nav = true;
        }

        return true;
    }

    /**
     * Function that actually displays the calendar.
     *
     * @access public
     * @param int $timestamp
     * @return string
     */
    public function displayCalendar($timestamp = 0) {
        if (!$this->errorCheck()) {

            if (!$timestamp) {
                $timestamp = time();
            }

            $this->timestamp = mktime(0, 0, 0, date("n", $timestamp), 1, date("Y", $timestamp));
            $date = getdate($this->timestamp);
            $day = $date["mday"];			// Numeric representation of the day of the month (1 - 31)
            $month = $date["mon"];			// Numeric representation of a month (1 - 12)
            $month_name = $date["month"];	// A full textual representation of a month (January - December)
            $year = $date["year"];			// 4 digit year
            $first_week_day = $date["wday"];// Numeric representation of the day of the week
            $days_in_month = date("t", $date[0]);
            $colspan = (1 + ($this->day_end - $this->day_start));

            $this->prepareEvents();

            $calendar_html  = "<table id=\"calendar-table\" cellspacing=\"1\" cellpadding=\"0\" border=\"0\">\n";
            if ($this->show_nav) {
                $calendar_html .= "<tbody id=\"calendar-title-bar\">\n";
                $calendar_html .= "	<tr>\n";
                $calendar_html .= "		<td colspan=\"".$colspan."\">\n";
                $calendar_html .= "			<div>\n";
                $calendar_html .= "			<div id=\"calendar-title-navigation\">".$this->renderNavigation()."</div>\n";
                $calendar_html .= "				<div id=\"calendar-title-text\"><h1><strong>".$month_name."</strong> ".$year."</h1></div>\n";
                $calendar_html .= "			</div>\n";
                $calendar_html .= "		</td>\n";
                $calendar_html .= "	</tr>";
                $calendar_html .= "</body>";
            }

            $calendar_html .= "<tr>\n";
            for ($col = $this->day_start; $col <= $this->day_end; $col++) {
                $calendar_html .= "<td class=\"calendar-day-names\">".$this->days[$col]."</td>\n";
            }
            $calendar_html .= "</tr>\n";

            $calendar_html .= "<tr class=\"calendar-table-rows\">";
            for ($week_day = 0; $week_day < $first_week_day; $week_day++) {
                $calendar_html .= "<td class=\"calendar-month-other\">&nbsp;</td>";
            }

            $week_day = $first_week_day;
            $row_num	= 0;
            for ($day_counter = 1; $day_counter <= $days_in_month; $day_counter++) {
                $week_day %= $colspan;

                if (($week_day == 0) && ($row_num != $week_day)) {
                    $calendar_html .= "</tr>\n<tr class=\"calendar-table-rows\">";
                }

                $calendar_html .= "<td>\n";
                $calendar_html .= "	<div class=\"calendar-day-number".(($year.$month.$day_counter == date("Y", time()).date("n", time()).date("j", time())) ? "-today" : "")."\">".$day_counter."</div>\n";
                $calendar_html .= "	<div id=\"calendar-".$year.$month.$day_counter."\" class=\"calendar-day-events\">".$this->renderEvents(mktime(0, 0, 0, $month, $day_counter, $year))."</div>\n";
                $calendar_html .= "</td>\n";
                $week_day++;
                $row_num++;
            }

            for ($week_day = $week_day; $week_day < $colspan; $week_day++) {
                $calendar_html .= "<td class=\"calendar-month-other\">&nbsp;</td>\n";
            }

            $calendar_html .= "</tr>";

            $calendar_html .= "</table>";

            return($calendar_html);
        } else {
            $calendar_html  = "<div>\n";
            $calendar_html .= "<ul>\n";
            foreach ($this->errormsg as $error_msg) {
                $calendar_html .= "<li>".htmlentities($error_msg, ENT_QUOTES, $this->charset)."</li>\n";
            }
            $calendar_html .= "</ul>\n";
            $calendar_html .= "</div>\n";
        }
    }

    private function prepareEvents() {
        if (@count($this->tmp_events) > 0) {
            $timestamp_start = $this->timestamp;
            $timestamp_end = mktime(23, 59, 59, date("n", $timestamp_start), date("t", $timestamp_start), date("Y", $timestamp_start));

            foreach ($this->tmp_events as $event) {
                $process = true;

                if ($event["timestamp_start"] > $timestamp_end) {
                    $process = false;
                } elseif ($event["timestamp_end"] < $timestamp_start) {
                    $process = false;
                }

                if ($process) {
                    $real_ts_start	= $event["timestamp_start"];
                    $real_ts_end	= $event["timestamp_end"];

                    if ($event["timestamp_start"] < $timestamp_start) {
                        $event["timestamp_start"] = $timestamp_start;
                    }

                    if ($event["timestamp_end"] > $timestamp_end) {
                        $event["timestamp_end"] = $timestamp_end;
                    }

                    $days = ceil(($event["timestamp_end"] - $event["timestamp_start"]) / 86400);
                    for ($i = 0; $i < $days; $i++) {
                        $this_day	= mktime(0, 0, 0, date("n", $event["timestamp_start"]), (date("j", $event["timestamp_start"]) + $i), date("Y", $event["timestamp_start"]));
                        $month	= date("m", $this_day);
                        $prev_day	= (date("d", $this_day) - 1);
                        $day		= date("d", $this_day);
                        $year	= date("Y", $this_day);
                        $yyyymmdd	= $year.$month.$day;

                        if ($prev_day < 10) {
                            $prev_day = "0".$prev_day;
                        }

                        if (is_array($this->events[$year.$month.$prev_day][$event["event_id"]])) {
                            $order	= $this->events[$year.$month.$prev_day][$event["event_id"]]["order"];
                        } else {
                            $order	= @count($this->events[$yyyymmdd]);
                        }

                        $this->events[$yyyymmdd][$event["event_id"]]["order"] = $order;
                        $this->events[$yyyymmdd][$event["event_id"]]["calendar_id"] = $event["calendar_id"];
                        $this->events[$yyyymmdd][$event["event_id"]]["timestamp_start"] = $real_ts_start;
                        $this->events[$yyyymmdd][$event["event_id"]]["timestamp_end"] = $real_ts_end;
                        $this->events[$yyyymmdd][$event["event_id"]]["event_title"] = $event["event_title"];
                        $this->events[$yyyymmdd][$event["event_id"]]["event_desc"] = $event["event_title"];
                        $this->events[$yyyymmdd][$event["event_id"]]["event_link"] = $event["event_link"];
                        $this->events[$yyyymmdd][$event["event_id"]]["event_misc"] = $event["event_misc"];
                    }
                }
            }
        }
    }

    private function renderEvents($timestamp = "") {
        $yyyymmdd = date("Y", $timestamp).date("m", $timestamp).date("d", $timestamp);
        $calendar_html = "";
        $events = array();
        $max = 0;

        if (is_array($this->events[$yyyymmdd])) {
            foreach ($this->events[$yyyymmdd] as $event) {
                if (is_array($events[$event["order"]])) {
                    $order = ($event["order"] + 1);
                    while (is_array($events[$order])) {
                        $order++;
                    }
                } else {
                    $order = $event["order"];
                }

                if ($order > $max) {
                    $max = $order;
                }

                $events[$order] = $event;
            }
        }

        for ($i = 0; $i <= $max; $i++) {
            $event_start = date("Ymd", $events[$i]["timestamp_start"]);
            $event_end = date("Ymd", $events[$i]["timestamp_end"]);
            $calendar_id = (isset($events[$i]["calendar_id"]) ? (int) $events[$i]["calendar_id"] : 0);

            if (!@is_array($events[$i])) {
                $calendar_html .= "<div class=\"calendar-day-placeholder\">&nbsp;</div>\n";
            } else {
                $calendar_html .= "<div class=\"calendar-day-event-".$calendar_id."\" style=\"".(($event_start == $yyyymmdd) ? " border-left: 1px ".(($gender == "male") ? "#99CCFF" : (($gender == "female") ? "#FFCCCC" : "#CCCCCC"))." solid; -moz-border-radius-topleft: 15px; -moz-border-radius-bottomleft: 15px;" : "")."".(($event_end == $yyyymmdd) ? " border-right: 1px ".(($gender == "male") ? "#99CCFF" : (($gender == "female") ? "#FFCCCC" : "#CCCCCC"))." solid; -moz-border-radius-topright: 15px; -moz-border-radius-bottomright: 15px" : "")."\" onmouseover=\"this.style.zIndex=20; this.style.overflow='visible';\" onmouseout=\"this.style.zIndex=1; this.style.overflow='hidden';\"".((isset($events[$i]["event_link"])) ? "onclick=\"window.location='".htmlentities($events[$i]["event_link"], ENT_QUOTES, $this->charset)."'\"" : "") .">".htmlentities($events[$i]["event_title"], ENT_QUOTES, $this->charset)."</div>\n";
            }
        }

        return $calendar_html;
    }

    private function renderNavigation() {
        $calendar_html  = "<a href=\"".$this->base_url.$this->replaceQuery(array("t" => strtotime("-1 ".$this->cal_view, $this->timestamp)))."\">Previous Month</a> | ";
        $calendar_html .= "<a href=\"".$this->base_url.$this->replaceQuery(array("t" => strtotime("+1 ".$this->cal_view, $this->timestamp)))."\">Next Month</a>";

        return $calendar_html;
    }

    private function errorCheck() {
        if (($this->day_start < 0) || ($this->day_start > 6)) {
            $this->errormsg[] = "Your start day must be between 0 (Sunday) and 6 (Saturday).";
        } else {
            if (($this->day_end < 0) || ($this->day_end > 6)) {
                $this->errormsg[] = "Your end day must be between 0 (Sunday) and 6 (Saturday).";
            } else {
                if ($this->day_start > $this->day_end) {
                    $this->errormsg[] = "Your end day is greater than your start day? Why? Crazy Daisy.";
                }
            }
        }

        if (@count($this->errormsg)) {
            return true;
        } else {
            return false;
        }
    }

    private function replaceQuery($modify = array()) {
        $processed = array();
        $tmp_query = array();

        if (count($modify) > 0) {
            $original	= explode("&", $_SERVER["QUERY_STRING"]);
            if (count($original) > 0) {
                foreach ($original as $key => $value) {
                    $pieces = explode("=", trim($value));
                    if ((isset($pieces[0])) && (isset($pieces[1]))) {
                        $processed[$pieces[0]] = $pieces[1];
                    }
                }
            }

            foreach ($modify as $key => $value) {
                if (array_key_exists($key, $processed)) {
                    if (($value === 0) || (($value) && ($value !=""))) {
                        $processed[$key] = $value;
                    } else {
                        unset($processed[$key]);
                    }
                } else {
                    if (($value === 0) || (($value) && ($value !=""))) {
                        $processed[$key] = $value;
                    }
                }
            }
            if (count($processed) > 0) {
                foreach ($processed as $var => $value) {
                    $tmp_query[] = $var."=".$value;
                }
                $new_query = implode("&", $tmp_query);
            } else {
                $new_query = "";
            }
        } else {
            $new_query = $_SERVER["QUERY_STRING"];
        }

        return (($new_query != "") ?  "?".$new_query : "");
    }
}