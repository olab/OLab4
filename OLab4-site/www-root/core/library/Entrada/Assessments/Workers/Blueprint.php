<?php
/**
 * Entrada [ http://www.entrada-project.org ]
 *
 * Entrada is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Entrada is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Entrada.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Organization: Queen's University
 * @author Unit: Health Sciences, Education Technology Unit
 * @author Developer: Adrian Mellognio <adrian.mellognio@queensu.ca>
 * @copyright Copyright 2016 Queen's University. All Rights Reserved.
 *
 */
class Entrada_Assessments_Workers_Blueprint extends Entrada_Assessments_Workers_Base {
    protected $form_blueprint_id = null;
    private $form_type_id = null;
    protected $global_storage = "Entrada_Assessments_Workers_GlobalStorage";

    public function __construct($arr) {
        parent::__construct($arr);
    }

    public function getID() {
        return $this->form_blueprint_id;
    }

    public function setID($id) {
        $this->form_blueprint_id = $id;
    }

    public function getBlueprintID() {
        return $this->form_blueprint_id;
    }

    public function setBlueprintID($id) {
        $this->form_blueprint_id = $id;
    }

    /**
     * Update the form blueprint record's published flag. This doesn't actually publish
     * the blueprint; a published blueprint is one that is "complete", where all forms have been
     * generated by the publish() method (which is executed by cron).
     *
     * @param bool $publish_value
     * @return bool
     */
    public function setPublished($publish_value = true) {
        global $translate;

        if (!is_bool($publish_value) && !is_numeric($publish_value)) {
            $this->addErrorMessage($translate->_("Invalid publish value."));
            return false;
        }
        if (!$this->form_blueprint_id) {
            $this->addErrorMessage($translate->_("Unable to publish without valid template ID."));
            return false;
        }
        $this->setStale(); // invalidate cache here when caching is added to this object

        // Directly update the record
        $form_blueprint = Models_Assessments_Form_Blueprint::fetchRowByID($this->form_blueprint_id);
        if (empty($form_blueprint)) {
            $this->addErrorMessage($translate->_("Unable to find template to publish."));
            return false;
        }

        $form_blueprint->setPublished((int)$publish_value);
        if (!$form_blueprint->update()) {
            $this->addErrorMessage($translate->_("Error setting published flag."));
            return false;
        }
        return true;
    }

    /**
     * Return whether this blueprint is published.
     *
     * @return bool
     */
    public function isPublished() {
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                return isset($this->dataset["form_blueprint"]["published"])
                    ? $this->dataset["form_blueprint"]["published"]
                    : false;
            }
        }
        return false;
    }

    /**
     * Return whether this blueprint is complete. A complete blueprint is one that is:
     *  - publishable (# of components == # of elements)
     *  - published (user has clicked "publish button") [set form_blueprints_table.published = 1]
     *  - forms have been generated (all of the forms for this blueprint have been generated) [form_blueprints_table.complete = 1]
     *
     * @return bool
     */
    public function isComplete() {
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                return isset($this->dataset["form_blueprint"]["complete"])
                    ? $this->dataset["form_blueprint"]["complete"]
                    : false;
            }
        }
        return false;
    }

    /**
     * Return whether this blueprint can be published.
     *
     * @return bool
     */
    public function isPublishable() {
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                if (count($this->dataset["elements"]) == count($this->dataset["components"])
                    && count($this->dataset["elements"]) > 0
                ) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Return whether this blueprint is deleted or not.
     *
     * @return bool
     */
    public function isDeleted() {
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                if ($this->dataset["form_blueprint"]["deleted_date"]) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Return whether this blueprint is the active blueprint of its form type.
     *
     * @return bool
     */
    public function isActive() {
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                return isset($this->dataset["form_blueprint"]["active"]) ? $this->dataset["form_blueprint"]["active"] : false;
            }
        }
        return false;
    }

    /**
     * Check if the current active organisation is authorized to access this blueprint.
     *
     * @return bool
     */
    public function isAuthorizedOrganisation() {
        if (!$this->validateActor()) {
            return false;
        }
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                foreach ($this->dataset["form_type_organisation"] as $form_type_org) {
                    if ($form_type_org["organisation_id"] == $this->actor_organisation_id) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * Compare the given component type shortname against the valid component types for this blueprint.
     *
     * @param $component_type_shortname
     * @return bool
     */
    public function isValidComponentType($component_type_shortname) {
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                foreach ($this->dataset["components"] as $component) {
                    if ($component_type_shortname == $component["shortname"]) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * Fetch the form type category. This object should only be using form blueprints of category "blueprint".
     *
     * @return null|string
     */
    public function getFormTypeCategory() {
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                return isset($this->dataset["form_type"]["category"]) ? $this->dataset["form_type"]["category"] : null;
            }
        }
        return null;
    }

    /**
     * Fetch which assessments and distributions are using this form.
     *
     * @return array
     */
    public function inUseBy() {
        $in_use_by = array();
        if ($this->form_blueprint_id) {
            $this->fetchData();
            if (!empty($this->dataset)) {
                $in_use_by = $this->dataset["meta"]["in_use_by"];
            }
        }
        return $in_use_by;
    }

    /**
     * Fetch all form data points, return in a data structure. Override existing internal dataset.
     *
     * @return false|array
     */
    public function fetchData() {
        if (empty($this->dataset)) {
            $this->buildDataset();
        } else {
            if (!array_key_exists("is_stale", $this->dataset) || $this->dataset["is_stale"]) {
                $this->buildDataset();
            }
        }
        return $this->dataset;
    }

    /**
     * Validate and load data into the dataset.
     *
     * @param array
     * @param bool $validate
     * @return bool
     */
    public function loadData($data, $validate = true) {
        global $translate;

        if (!$this->validateActor()) {
            return false;
        }
        if (!isset($data["form_type_id"])) {
            $this->addErrorMessage($translate->_("No form type specified."));
            return false;
        }
        $validated = array();
        if ($validate) {
            $validated["form_type_id"] = clean_input($data["form_type_id"], array("trim", "int"));
            $validated["course_id"] = clean_input($data["course_id"], array("trim", "int"));
            $validated["title"] = isset($data["title"]) ? clean_input($data["title"], array("trim", "striptags")) : null;
            $validated["description"] = isset($data["description"]) ? clean_input($data["description"], array("trim", "striptags")) : null;
            $validated["include_instructions"] = isset($data["include_instructions"]) ? clean_input($data["include_instructions"], array("trim", "int")) : 0;
            $validated["instructions"] = isset($data["instructions"]) ? clean_input($data["instructions"], array("trim")) : null;
        } else {
            $validated = $data;
        }

        if (!$this->form_blueprint_id && !array_key_exists("form_blueprint_id", $data)) {
            // New blueprint
            $dataset = $this->buildDefaultBlueprintStructure();
            $dataset["form_blueprint"]["form_type_id"] = $validated["form_type_id"];
            $dataset["form_blueprint"]["title"] = $validated["title"];
            $dataset["form_blueprint"]["course_id"] = $validated["course_id"];
            $dataset["form_blueprint"]["organisation_id"] = $this->actor_organisation_id;
            $dataset["form_blueprint"]["description"] = $validated["description"];
            $dataset["form_blueprint"]["include_instructions"] = $validated["include_instructions"];
            $dataset["form_blueprint"]["instructions"] = $validated["instructions"];
            $dataset["form_blueprint"]["created_date"] = time();
            $dataset["form_blueprint"]["created_by"] = $this->actor_proxy_id;
            $dataset["form_blueprint"]["published"] = 0;
            $dataset["form_blueprint"]["active"] = 0;

            // Load dataset
            $this->dataset = $dataset;
            $this->form_type_id = $validated["form_type_id"];

        } else {
            // ID is specified, so lets fetch
            $this->form_blueprint_id = $data["form_blueprint_id"];
            $this->buildDataset(); // sets $this->form_type_id

            $validated["updated_date"] = time();
            $validated["updated_by"] = $this->actor_proxy_id;

            // dataset is set by buildDataset, so we just update the form_blueprint record with the new validated data.
            $this->dataset["form_blueprint"] = array_merge($this->dataset["form_blueprint"], $validated);
        }
        return true;
    }

    /**
     * Create a top-level form blueprint record (and author record, if applicable).
     */
    public function saveData() {
        global $translate;

        if (!$this->validateActor()) {
            return false;
        }

        if (empty($this->dataset)) {
            $this->addErrorMessage($translate->_("Unable to save empty dataset."));
            return false;
        }

        $form_blueprint_model = new Models_Assessments_Form_Blueprint();
        if ($this->form_blueprint_id) {
            $method = "update";
        } else {
            $method = "insert";
        }
        if ($method == "update") {
            $form_blueprint_model->setOrganisationID($this->actor_organisation_id);
            $form_blueprint_model->setUpdatedDate(time());
            $form_blueprint_model->setUpdatedBy($this->actor_proxy_id);
        }

        $form_blueprint_model->fromArray($this->dataset["form_blueprint"]);
        if ($form_blueprint_model->{$method}()) {
            $this->setID($form_blueprint_model->getID());
            if ($method == "insert") {
                // Update author record for this blueprint
                $author = array(
                    "form_blueprint_id" => $form_blueprint_model->getID(),
                    "author_type" => "proxy_id",
                    "author_id" => $this->actor_proxy_id,
                    "created_date" => time(),
                    "created_by" => $this->actor_proxy_id
                );
                $a = new Models_Assessments_Form_Blueprint_Author($author);
                if (!$a->insert()) {
                    $this->addErrorMessage($translate->_("Unable to add author permission."));
                }

                // Update course author record
                $course_author = array(
                    "form_blueprint_id" => $form_blueprint_model->getID(),
                    "author_type" => "course_id",
                    "author_id" => $this->dataset["form_blueprint"]["course_id"],
                    "created_date" => time(),
                    "created_by" => $this->actor_proxy_id
                );
                $a = new Models_Assessments_Form_Blueprint_Author($course_author);
                if (!$a->insert()) {
                    $this->addErrorMessage($translate->_("Unable to add course permission."));
                }

                // Configure the initial form elements based on the form type
                if (!$this->configureInitialBlueprintElements()) {
                    $this->addErrorMessage($translate->_("Error when creating initial blueprint."));
                    return false;
                }
            }
            return true;

        } else {
            $this->addErrorMessage($translate->_("Unable to save form blueprint data."));
            application_log("error", "Unable to save form blueprint id = '{$this->form_blueprint_id}', method = '$method'");
            return false;
        }
    }

    /**
     * Create all the forms and associations for this blueprint.
     * Mark the current blueprint as active, disable all others.
     *
     * @return bool
     */
    public function publishBlueprint() {
        global $translate;
        if (!$this->validateActor()) {
            return false;
        }
        if (!$this->form_blueprint_id) {
            $this->addErrorMessage($translate->_("No blueprint ID specified."));
            return false;
        }
        $this->buildDataset();
        if (empty($this->dataset)) {
            $this->addErrorMessage($translate->_("Unable to fetch blueprint data."));
            return false;
        }
        if ($this->isActive() || $this->isComplete()) {
            $this->addErrorMessage($translate->_("This blueprint is already published."));
            return false;
        }
        $blueprint_object = Entrada_Assessments_Workers_Blueprints_Factory::getBlueprint(
            $this->form_type_id,
            $this->actor_proxy_id,
            $this->actor_organisation_id,
            array(
                "form_blueprint_id" => $this->form_blueprint_id,
                "form_type_id" => $this->form_type_id
            )
        );
        if (!$blueprint_object) {
            $this->addErrorMessage($translate->_("Unable to publish form blueprint of unknown form type."));
            return false;
        }
        if (!$blueprint_object->publish($this->dataset)) {
            // Failed to publish
            $this->addErrorMessages($blueprint_object->getErrorMessages());
            return false;
        }
        $this->dataset["form_blueprint"]["published"] = true;
        $this->dataset["form_blueprint"]["complete"] = true;
        $this->saveData();
        return true;
    }

    /**
     * Mark the current blueprint as deleted.
     *
     * @return bool
     */
    public function delete() {
        global $translate;
        if (!$this->validateActor()) {
            return false;
        }
        if (!$this->form_blueprint_id) {
            $this->addErrorMessage($translate->_("No form template ID specified."));
            return false;
        }
        $this->fetchData();
        if (empty($this->dataset)) {
            $this->addErrorMessage($translate->_("Empty form template dataset."));
            return false;
        }
        $this->dataset["form_blueprint"]["deleted_date"] = time();
        $this->dataset["form_blueprint"]["updated_date"] = time();
        $this->dataset["form_blueprint"]["updated_by"] = $this->actor_proxy_id;
        $blueprint_record = new Models_Assessments_Form_Blueprint($this->dataset["form_blueprint"]);
        if (!$blueprint_record->update()) {
            $this->addErrorMessage($translate->_("Unable to delete from template."));
            return false;
        }
        // We've saved the blueprint marking it deleted. Now, remove any entries for the related forms in the form objectives table.
        $form_ids = array();
        foreach ($this->dataset["forms"] as $key => $form_id) {
            $form_ids[] = $form_id;
        }
        if (Models_Assessments_Form_Objective::deleteByFormIDs($form_ids)) {
            $this->addErrorMessage($translate->_("Failed to delete form objective records."));
            return false;
        }
        return true;
    }

    /**
     * Copy a blueprint and all its elements
     *
     * @param $old_blueprint_id
     * @param null $new_blueprint_title
     * @param $new_course_id
     * @return bool
     */
    public function copy($old_blueprint_id, $new_blueprint_title = null, $new_course_id) {
        global $translate;
        if (!$this->validateActor()) {
            return false;
        }
        $old_form_blueprint = Models_Assessments_Form_Blueprint::fetchRowByID($old_blueprint_id);
        if (!$old_form_blueprint) {
            $this->addErrorMessage($translate->_("Source blueprint not found."));
            return false;
        }

        $element_errors = 0;
        $author_errors = 0;
        $objective_errors = 0;
        $rating_scales_errors = 0;

        if ($new_blueprint_title !== null) {
            $new_form_data["title"] = $new_blueprint_title;
        }
        // Create a new form to copy to
        $new_form_data["organisation_id"] = $this->actor_organisation_id;
        $new_form_data["course_id"] = $new_course_id;
        $new_form_data["published"] = 0;
        $new_form_data["active"] = 0;
        $new_form_data["created_date"] = time();
        $new_form_data["updated_date"] = time();
        $new_form_data["form_type_id"] = $old_form_blueprint->getFormTypeID();
        $new_form_data["created_by"] = $this->actor_proxy_id;
        $new_form_data["updated_by"] = $this->actor_proxy_id;
        $new_form_data["description"] = $old_form_blueprint->getDescription();
        $new_form_data["include_instructions"] = $old_form_blueprint->getIncludeInstructions();
        $new_form_data["instructions"] = $old_form_blueprint->getInstructions();
        $blueprint_form = new Models_Assessments_Form_Blueprint($new_form_data);
        if (!$blueprint_form->insert()) {
            $this->addErrorMessage($translate->_("Failed to copy form blueprint."));
            return false;
        }

        // Retrieve all authors from the previous form
        $authors = Models_Assessments_Form_Blueprint_Author::fetchAllByBlueprintID($old_blueprint_id);
        if ($authors) {
            // Insert copies of the authors with the newly created form's ID
            foreach ($authors as $author) {
                $author_data = array(
                    "form_blueprint_id"     => $blueprint_form->getID(),
                    "author_type"           => $author->getAuthorType(),
                    "author_id"             => $author->getAuthorId(),
                    "created_date"          => time(),
                    "created_by"            => $this->actor_proxy_id,
                    "updated_date"          => $author->getUpdatedDate(),
                    "updated_by"            => $author->getUpdatedBy()
                );
                $author = new Models_Assessments_Form_Blueprint_Author($author_data);
                if (!$author->insert()) {
                    if (!$author_errors) {
                        $this->addErrorMessage($translate->_("An error occured while adding an author to the form."));
                    }
                    $author_errors++;
                }
            }
        }

        // If the program is the same for both blueprint, retrieve the objectives from the previous blueprint
        // and organise it to make it easier to copy for each elements
        $blueprint_objectives = array();
        if ($new_course_id == $old_form_blueprint->getCourseID() ) {
            $blueprint_objective_records = Models_Assessments_Form_Blueprint_Objective::fetchAllByFormBlueprintID($old_blueprint_id);
            if (!empty($blueprint_objective_records)) {
                foreach ($blueprint_objective_records as $record) {
                    $blueprint_objectives[$record->getAfblueprintElementID()][] = $record->toArray();
                }
            }
        }

        // Retrieve and copy any rating scales attached to the blueprint elements
        $blueprint_rating_scales = Models_Assessments_Form_Blueprint_RatingScales::fetchAllByFormBlueprintID($old_blueprint_id);
        $elements_rating_scale = array();
        if (is_array($blueprint_rating_scales)) {
            foreach ($blueprint_rating_scales as $blueprint_rating_scale) {
                $elements_rating_scale[$blueprint_rating_scale->getAfblueprintElementID()] = $blueprint_rating_scale->toArray();
            }
        }

        // Retrieve the elements from the previous form
        $elements = Models_Assessments_Form_Blueprint_Element::fetchAllByFormBlueprintID($old_blueprint_id);
        if ($elements) {
            // Insert copies of elements with the newly created form's ID
            foreach ($elements as $element) {
                $original_id = $element->getID();

                $element_data = array(
                    "form_blueprint_id" => $blueprint_form->getID(),
                    "element_type"      => $element->getElementType(),
                    "element_value"     => $element->getElementValue(),
                    "text"              => $element->getText(),
                    "editor_state"      => $element->getEditorState(),
                    "comment_type"      => $element->getCommentType(),
                    "component_order"   => $element->getComponentOrder(),
                    "created_date"      => time(),
                    "created_by"        => $this->actor_proxy_id,
                    "updated_date"      => time(),
                    "updated_by"        => $this->actor_proxy_id
                );
                $element = new Models_Assessments_Form_Blueprint_Element($element_data);
                if (!$element->insert()) {
                    if (!$element_errors) {
                        $this->addErrorMessage($translate->_("An error occurred while adding an element to a form blueprint."));
                    }
                    $element_errors++;
                }
                $new_id = $element->getID();

                // Copy rating scale reference if any
                if (array_key_exists($original_id, $elements_rating_scale)) {
                    $new_rating_scale_data = array(
                        "organisation_id"           => $elements_rating_scale[$original_id]["organisation_id"],
                        "rating_scale_id"           => $elements_rating_scale[$original_id]["rating_scale_id"],
                        "afblueprint_element_id"    => $new_id,
                        "created_date"              => time(),
                        "created_by"                => $this->actor_proxy_id,
                        "updated_date"              => time(),
                        "updated_by"                => $this->actor_proxy_id
                    );

                    $new_rating_scale = new Models_Assessments_Form_Blueprint_RatingScales($new_rating_scale_data);
                    if (!$new_rating_scale->insert()) {
                        if (!$new_rating_scale) {
                            $this->addErrorMessage($translate->_("An error occurred while adding a rating scale to a form blueprint."));
                        }
                        $rating_scales_errors++;
                    }
                }

                // Map the objective if the program is the same
                if (is_array($blueprint_objectives) && array_key_exists($original_id, $blueprint_objectives) && count($blueprint_objectives[$original_id])) {
                    // EPA level
                    foreach($blueprint_objectives[$original_id] as $epa_objective) {
                        if (!$epa_objective["associated_objective_id"]) {
                            // This is an EPA
                            $new_epa_data = array(
                                "organisation_id"           => $epa_objective["organisation_id"],
                                "objective_id"              => $epa_objective["objective_id"],
                                "associated_objective_id"   => null,
                                "afblueprint_element_id"    => $new_id,
                                "created_date"              => time(),
                                "created_by"                => $this->actor_proxy_id,
                                "updated_date"              => time(),
                                "updated_by"                => $this->actor_proxy_id
                            );

                            $new_epa = new Models_Assessments_Form_Blueprint_Objective($new_epa_data);
                            if (!$new_epa->insert()) {
                                if (!$objective_errors) {
                                    $this->addErrorMessage($translate->_("An error occured while adding an objective to the form blueprint."));
                                }
                                $objective_errors++;
                            }

                            // CV or Milestones/EC level
                            foreach ($blueprint_objectives[$original_id] as $cv_milestone_objective) {
                                if ($cv_milestone_objective["associated_objective_id"] == $epa_objective["afblueprint_objective_id"]) {
                                    // This is an EPA
                                    $new_cv_milestone_data = array(
                                        "organisation_id"           => $cv_milestone_objective["organisation_id"],
                                        "objective_id"              => $cv_milestone_objective["objective_id"],
                                        "associated_objective_id"   => $new_epa->getID(),
                                        "afblueprint_element_id"    => $new_id,
                                        "created_date"              => time(),
                                        "created_by"                => $this->actor_proxy_id,
                                        "updated_date"              => time(),
                                        "updated_by"                => $this->actor_proxy_id
                                    );

                                    $new_cv_milestone = new Models_Assessments_Form_Blueprint_Objective($new_cv_milestone_data);
                                    if (!$new_cv_milestone->insert()) {
                                        if (!$objective_errors) {
                                            $this->addErrorMessage($translate->_("An error occured while adding an objective to the form blueprint."));
                                        }
                                        $objective_errors++;
                                    }

                                    // CV Responses level
                                    foreach ($blueprint_objectives[$original_id] as $response_objective) {
                                        if ($response_objective["associated_objective_id"] == $cv_milestone_objective["afblueprint_objective_id"]) {
                                            $new_respsonse = array(
                                                "organisation_id"           => $response_objective["organisation_id"],
                                                "objective_id"              => $response_objective["objective_id"],
                                                "associated_objective_id"   => $new_cv_milestone->getID(),
                                                "afblueprint_element_id"    => $new_id,
                                                "created_date"              => time(),
                                                "created_by"                => $this->actor_proxy_id,
                                                "updated_date"              => time(),
                                                "updated_by"                => $this->actor_proxy_id
                                            );

                                            $new_response_objective = new Models_Assessments_Form_Blueprint_Objective($new_respsonse);
                                            if (!$new_response_objective->insert()) {
                                                if (!$objective_errors) {
                                                    $this->addErrorMessage($translate->_("An error occured while adding an objective to the form blueprint."));
                                                }
                                                $objective_errors++;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if ($element_errors) {
            return false;
        }

        // For author errors, we don't care; the records were all created and are still usable.
        return $blueprint_form->getID();
    }

    /**
     * Build the initial form elements for a blueprint, based on form type.
     *
     * @return bool
     */
    public function configureInitialBlueprintElements() {
        global $translate;
        if (!$this->validateActor()) {
            return false;
        }
        if (!$this->form_blueprint_id) {
            $this->addErrorMessage($translate->_("Form blueprint ID was not specified."));
            return false;
        }
        $this->fetchData();
        if (empty($this->dataset)) {
            $this->addErrorMessage($translate->_("Unable to fetch form blueprint dataset."));
            return false;
        }
        $blueprint_object = Entrada_Assessments_Workers_Blueprints_Factory::getBlueprint(
            $this->form_type_id,
            $this->actor_proxy_id,
            $this->actor_organisation_id,
            array(
                "form_blueprint_id" => $this->form_blueprint_id,
                "form_type_id" => $this->form_type_id
            )
        );
        if (!$blueprint_object) {
            $this->addErrorMessage($translate->_("Unable to fetch blueprint object."));
            return false;
        }
        if (!$blueprint_object->initialize()) {
            $this->addErrorMessages($blueprint_object->getErrorMessages());
            return false;
        }
        $this->setStale(); // it's been initialized, so flag a dataset refresh
        return true;
    }

    /**
     * Update a blueprint component progress (the form blueprint element record).
     *
     * @param $blueprint_component_type
     * @param $component_data
     * @param $component_order
     * @param $comment_type
     * @param array $flagged_responses
     * @param $editor_state
     * @param $default
     * @return bool
     */
    public function updateBlueprintComponentProgress($blueprint_component_type, $component_data, $component_order = null, $comment_type = "disabled", $flagged_responses = array(), $editor_state = null, $default = null) {
        global $translate;
        if (!$this->validateActor()) {
            return false;
        }
        if (!$this->form_blueprint_id) {
            $this->addErrorMessage($translate->_("Form blueprint ID was not specified."));
            return false;
        }
        $this->fetchData();
        if (empty($this->dataset)) {
            $this->addErrorMessage($translate->_("Unable to fetch dataset."));
            return false;
        }
        $blueprint_type_object = Entrada_Assessments_Workers_Blueprints_Factory::getBlueprint(
            $this->form_type_id,
            $this->actor_proxy_id,
            $this->actor_organisation_id,
            array(
                "form_blueprint_id" => $this->form_blueprint_id,
                "form_type_id" => $this->form_type_id
            )
        );
        if (!$blueprint_type_object) {
            $this->addErrorMessage($translate->_("Unable to determine blueprint form type."));
            return false;
        }
        $blueprint_type_object->setFormBlueprintID($this->form_blueprint_id);
        // Let the factory generated object handle updating component progress.
        // e.g., the supervisor form object can potentially handle entrustment items differently than other blueprint types
        $bp_progress = array(
            "blueprint_component_type" => $blueprint_component_type,
            "components" => $this->dataset["components"],
            "component_data" => $component_data,
            "component_order" => $component_order,
            "comment_type" => $comment_type,
            "flagged_responses" => $flagged_responses,
            "editor_state" => $editor_state,
            "default" => $default
        );
        $update_status = $blueprint_type_object->updateComponentProgress($bp_progress);
        if ($update_status) {
            // The update was successful, so flag a dataset refresh
            $this->setStale();
        } else {
            $this->addErrorMessages($blueprint_type_object->getErrorMessages());
        }
        return $update_status;
    }

    /**
     * Fetch the component data for a given component by component ID, for the current blueprint.
     *
     * @param $component_id
     * @return array|bool
     */
    public function fetchComponentData($component_id) {
        global $translate;
        $blueprint_data = $this->fetchData();
        if (empty($blueprint_data)) {
            return array();
        }
        if (empty($blueprint_data["components"])) {
            $this->addErrorMessage($translate->_("This blueprint has no components."));
            return false;
        }
        if (!isset($blueprint_data["components"][$component_id])) {
            return array();
        }
        $component = $blueprint_data["components"][$component_id];
        if (empty($component)) {
            $this->addErrorMessage($translate->_("No component for the given ID."));
            return false;
        }
        if (empty($blueprint_data["elements"])) {
            return array();
        }
        $element_arr = array();
        foreach ($blueprint_data["elements"] as $element) {
            if ($element["component_order"] == $component_id) {
                $element_arr = $element;
                break;
            }
        }

        if (empty($element_arr)) {
            return array();
        }

        $objective_arr = isset($blueprint_data["objectives"][$element_arr["afblueprint_element_id"]]) ?
            $blueprint_data["objectives"][$element_arr["afblueprint_element_id"]] : null;

        $scale_arr = isset($blueprint_data["scales"][$element_arr["afblueprint_element_id"]]) ?
            $blueprint_data["scales"][$element_arr["afblueprint_element_id"]][0] : null;

        switch ($component["shortname"]) {
            case "epa_selector":
                return $this->fetchComponentEPASelectorSelected($objective_arr);

            case "contextual_variable_list":
                $mode = isset($component["settings"]["mode"]) ? $component["settings"]["mode"] : "epa";
                return $this->fetchComponentContextualVariablesSelected($objective_arr, $mode);

            case "ms_ec_scale":
            case "entrustment_scale":
                return $this->fetchComponentScaleDataSelected($component, $element_arr, $scale_arr);

            case "free_text_element":
                return $this->fetchComponentFreeTextSelected($element_arr);

            case "role_selector":
                return $this->fetchComponentRolesSelected($objective_arr);
        }
        return false;
    }

    /**
     * Fetch a filtered list of objectives.
     *
     * @param $objectives_list
     * @param $form_type_id
     * @param array $filter_options
     * @return array|bool|mixed
     */
    public function fetchFilteredObjectives(&$objectives_list, $form_type_id, $filter_options = array()) {

        // Create an empty worker from the factory
        $blueprint = Entrada_Assessments_Workers_Blueprints_Factory::getBlueprint(
            $form_type_id,
            $this->actor_proxy_id,
            $this->actor_organisation_id,
            array(
                "form_blueprint_id" => null,
                "form_type_id" => $form_type_id
            )
        );
        // Call the relevant filter
        $filtered = $blueprint->filterObjectiveList($objectives_list, $filter_options); // base class method will be invoked if none is overridden in worker
        return $filtered;
    }

    /**
     * Fetch all forms that are tagged with the given code and objective set ID.
     * e.g. fetch all forms that have objective code "procedure" and are of the "contextual_variable_responses" objective set.
     *
     * @param string $objective_code
     * @param int $objective_set_id
     * @return array|bool
     */
    public function fetchFormListByType($objective_code, $objective_set_id) {
        global $translate;
        if (!$this->isPublished()) {
            $this->addErrorMessage($translate->_("This form template is not published."));
            return false;
        }
        $blueprint_data = $this->fetchData();
        if (empty($blueprint_data)) {
            $this->addErrorMessage($translate->_("Unable to fetch form template data."));
            return false;
        }
        if (empty($blueprint_data["forms"])) {
            $this->addErrorMessage($translate->_("This form template has no form children."));
            return false;
        }
        $form_list = array();
        $filtered_form_ids = Models_Assessments_Form::fetchFormListByAttachedItemObjective($blueprint_data["forms"], $objective_code, $objective_set_id);
        if (empty($filtered_form_ids)) {
            $this->addErrorMessage($translate->_("No forms found."));
            return false;
        }
        foreach ($filtered_form_ids as $form_data) {
            $form_list[$form_data["form_id"]] = array(
                "form_id" => $form_data["form_id"],
                "objective_id" => $form_data["objective_id"],
                "objective_name" => $form_data["objective_name"]
            );
        }
        if (empty($form_list)) {
            $this->addErrorMessage($translate->_("No procedures found."));
            return false;
        }
        return $form_list;
    }

    //-- Protected --//

    /**
     * Fetch the blueprint components for a given form type.
     * Components are all supported by views and are not generalized.
     * Form types only support specific blueprint components.
     *
     * @param $form_type_id
     * @return array|bool
     */
    protected function fetchBlueprintComponentsByFormTypeID($form_type_id) {
        global $translate;
        if (!$this->validateActor()) {
            return false;
        }
        $blueprint = Entrada_Assessments_Workers_Blueprints_Factory::getBlueprint(
            $this->form_type_id,
            $this->actor_proxy_id,
            $this->actor_organisation_id,
            array(
                "form_blueprint_id" => $this->form_blueprint_id,
                "form_type_id" => $form_type_id
            )
        );
        if (!$blueprint) {
            $this->addErrorMessage($translate->_("The specified form type is not defined for this organisation."));
            return false;
        }
        return $blueprint->getComponents();
    }

    //-- Private methods --//

    /**
     * Build an array usable by the EPA selector view from the session data.
     *
     * @param array $objectives
     * @return array | bool

    private function fetchComponentEPASelectorSelected($objectives = array()) {
        if ($objectives === null) {
            return false;
        }
        $result = array();
        foreach ($objectives as $objective) {
            $result[] = $objective["objective_id"];
        }
        return $result;
    }*/
    private function fetchComponentEPASelectorSelected($objectives = array()) {
        if ($objectives === null) {
            return false;
        }
        $new_objective_array = array();
        foreach ($objectives as $objective) {
            $new_objective_array[$objective["afblueprint_objective_id"]] = $objective;
        }
        $objectives = $new_objective_array;
        $result = array();

        foreach ($objectives as $epa_id => $objective) {
            if (!$objective["associated_objective_id"]) {
                // Find the milestones
                $found = false;
                foreach ($objectives as $milestone_id => $milestone) {
                    if ($milestone["associated_objective_id"] == $epa_id) {
                        $found = true;
                        $result[$objective["objective_id"]][] = $milestone["objective_id"];
                    }
                }
                // No milestones found, use the objective as is
                if (!$found) {
                    // We didn't find any, so we use the objective as is, assuming it is milestone-less
                    $result[$objective["objective_id"]] = $objective;
                }

            }
        }
        return $result;
    }

    /**
     * Build an array usable by the Contectual Variables selector from the session data.
     *
     * @param array $objectives
     * @param string $mode
     * @return array|bool
     */
    private function fetchComponentContextualVariablesSelected($objectives = array(), $mode = "epa") {
        if ($objectives === null) {
            return false;
        }
        $new_objective_array = array();
        foreach ($objectives as $objective) {
            $new_objective_array[$objective["afblueprint_objective_id"]] = $objective;
        }

        $objectives = $new_objective_array;
        $result = array();

        switch ($mode) {
            case "standalone":
                // Variable level
                foreach ($objectives as $var_id => $var_obj) {
                    if (!$var_obj["associated_objective_id"]) {
                        // Response level
                        foreach ($objectives as $resp_obj) {
                            if ($resp_obj["associated_objective_id"] == $var_id) {
                                $result[$var_obj["objective_id"]][] = $resp_obj["objective_id"];
                            }
                        }
                    }
                }
                break;
            default:
                // EPA level
                foreach ($objectives as $epa_id => $objective) {
                    if (!$objective["associated_objective_id"]) {
                        // Variable level
                        foreach ($objectives as $var_id => $var_obj) {
                            if ($var_obj["associated_objective_id"] == $epa_id) {
                                // Response level
                                foreach ($objectives as $resp_obj) {
                                    if ($resp_obj["associated_objective_id"] == $var_id) {
                                        $result[$objective["objective_id"]][$var_obj["objective_id"]][] = $resp_obj["objective_id"];
                                    }
                                }
                            }
                        }
                    }
                }
        }
        return $result;
    }

    /**
     * Fetch selected component roles.
     *
     * @param array $objectives
     * @return array|bool
     */
    private function fetchComponentRolesSelected($objectives = array()) {
        if ($objectives === null) {
            return false;
        }
        $result = array();
        foreach ($objectives as $objective) {
            $result[] = $objective["objective_id"];
        }
        return $result;
    }

    /**
     * Build an array usable by the Scale selector component view from the session data
     *
     * @param $component
     * @param $element
     * @param array $scale
     * @return mixed
     */
    private function fetchComponentScaleDataSelected($component, $element, $scale) {
        if (empty($scale)) {
            return false;
        }
        $result["selected_scale_id"] = $scale["rating_scale_id"];
        $editor_state = json_decode($element["editor_state"], true);
        $result["flagged_response_descriptors"] = isset($editor_state["flagged_response_descriptors"]) ? $editor_state["flagged_response_descriptors"] : array();
        if (intval($result["selected_scale_id"])) {
            $scale_object = new Entrada_Assessments_Workers_Scale($this->buildActorArray(array("rating_scale_id" => $scale["rating_scale_id"])));
            $result["scale_items"] = $scale_object->fetchData();
        }
        if ($component["shortname"] == "entrustment_scale") {
            $result["item_text"] = isset($editor_state["item_text"]) ? $editor_state["item_text"] : "";
        }
        $result["allow_default"] = (isset($editor_state["default"]) && intval($editor_state["default"])) ? 1 : 0;
        $result["default_response"] = isset($editor_state["default"]) ? $editor_state["default"] : null;
        $result["comment_type"] = $element["comment_type"];

        return $result;
    }

    /**
     * Build an array usable by the free text element component
     *
     * @param array $element
     * @return array
     */
    private function fetchComponentFreeTextSelected($element) {
        $editor_state = json_decode($element["editor_state"], true);
        if (isset($editor_state["element_text"])) {
            return array("element_text" => $editor_state["element_text"]);
        }
    }

    /**
     * Fetch all related data for a given form ID.
     *
     * Create the dataset and stores it in the $this->dataset property. Also updates $this->form_type_id property.
     *
     * @return bool
     */
    private function buildDataset() {
        global $translate;

        if (!$this->form_blueprint_id) {
            $this->addErrorMessage($translate->_("No blueprint ID specified."));
            application_log("error", "fromBlueprintBuildDataset: Unable to fetch form blueprint without ID");
            return false;
        }

        $form_blueprint = Models_Assessments_Form_Blueprint::fetchRowByIDIncludeDeleted($this->form_blueprint_id);
        if (!$form_blueprint) {
            // Invalid form ID
            $this->addErrorMessage($translate->_("Invalid blueprint ID specified."));
            application_log("error", "fromBlueprintBuildDataset: Invalid form blueprint ID (form record doesn't exist)");
            return false;
        }

        $this->form_type_id = $form_blueprint->getFormTypeID();

        if (!$form_type = Models_Assessments_Form_Type::fetchRowByID($this->form_type_id)) {
            $this->addErrorMessage($translate->_("Invalid form type ID specified."));
            application_log("error", "fromBlueprintBuildDataset: Invalid form type ID (form type record doesn't exist)");
            return false;
        }

        // Fetch organisations that can access this blueprint
        if (!$form_type_organisations = Models_Assessments_Form_TypeOrganisation::fetchAllByFormTypeID($this->form_type_id)) {
            $this->addErrorMessage($translate->_("Unable to fetch organisation for blueprint."));
            return false;
        }

        // Fetch authors
        $authors = Models_Assessments_Form_Blueprint_Author::fetchAllByBlueprintID($this->form_blueprint_id);
        if (!is_array($authors)) {
            $authors = array();
        }

        // Fetch blueprint elements. These form_blue_element records refer to the form components.
        $elements = array();
        $blueprint_elements = Models_Assessments_Form_Blueprint_Element::fetchAllByFormBlueprintID($this->form_blueprint_id);
        foreach ($blueprint_elements as $element) {
            $elements[$element->getID()] = $element->toArray();
        }

        // Fetch the valid components for this form type
        $components = $this->fetchBlueprintComponentsByFormTypeID($this->form_type_id);

        // Item header controls view
        $form_controls_view = new Views_Assessments_Forms_Controls_ElementHeaderControls(array("mode" => "editor-readonly"));

        $rubrics = array();

        // For all of the standard items that are part of the blueprint, fetch Rendering options arrays for each
        // Fetch view options that will be passed to the view to render each single item (with disabled overlay)
        $standard_item_options = array();
        foreach ($elements as $bp_element) {

            // Save the view options for the item in order to render it later.
            if ($bp_element["element_type"] == "item") {

                // TODO: In the future refactor this with item/view refactor. We shouldn't have to call Entrada_Assessments_Forms to be able to render an item.

                $element_item_object = new Entrada_Assessments_Workers_Item($this->buildActorArray(array("item_id" => $bp_element["element_value"])));
                $item_view_options = Entrada_Assessments_Forms::buildItemViewOptionsForRender($element_item_object->fetchData(), true, null, true);
                $item_header_html = $form_controls_view->render(
                    array(
                        "afelement_id" => null,
                        "element_id" => $bp_element["element_value"],
                        "itemtype_shortname" => $item_view_options["itemtype_shortname"],
                        "only_edit_pencil" => true // This header will only contain the edit pencil
                    ),
                    false
                );
                $item_view_options["header_html"] = $item_header_html;
                $standard_item_options[$bp_element["element_value"]] = $item_view_options;
            }

            // Save the related rubric data for render later.
            if ($bp_element["element_type"] == "rubric") {
                $element_rubric_object = new Entrada_Assessments_Workers_Rubric($this->buildActorArray(array("rubric_id" => $bp_element["element_value"])));
                $rubrics[$bp_element["element_value"]] = $element_rubric_object->fetchData();
            }
        }

        // Store objectives in our dataset indexed by the element they are attached to
        $blueprint_objective_records = Models_Assessments_Form_Blueprint_Objective::fetchAllByFormBlueprintID($this->form_blueprint_id);
        $blueprint_objectives = array();
        if (!empty($blueprint_objective_records)) {
            foreach ($blueprint_objective_records as $record) {
                $blueprint_objectives[$record->getAfblueprintElementID()][] = $record->toArray();
            }
        }

        // Store scales in our dataset indexed by the element they are attached to
        $blueprint_scale_records = Models_Assessments_Form_Blueprint_RatingScales::fetchAllByFormBlueprintID($this->form_blueprint_id);
        $blueprint_scales = array();
        if (!empty($blueprint_scale_records)) {
            foreach ($blueprint_scale_records as $scale) {
                $blueprint_scales[$scale->getAfblueprintElementID()][] = $scale->toArray();
            }
        }

        $forms_created_by_this_blueprint = array();
        $forms_created_records = Models_Assessments_Form::fetchFormIDsByOriginator($this->form_blueprint_id, "blueprint");
        if (is_array($forms_created_records)) {
            $forms_created_by_this_blueprint = $forms_created_records;
        }

        // Build and return the dataset
        $resultset = $this->buildDefaultBlueprintStructure();
        $resultset["form_blueprint"] = $form_blueprint->toArray();
        $resultset["authors"] = array_map(function($a){ return $a->toArray(); }, $authors);
        $resultset["elements"] = $elements;
        $resultset["rubrics"] = $rubrics;
        $resultset["components"] = $components;
        $resultset["objectives"] = $blueprint_objectives;
        $resultset["scales"] = $blueprint_scales;
        $resultset["forms"] = $forms_created_by_this_blueprint;
        $resultset["form_type"] = $form_type->toArray();
        $resultset["form_type_organisation"] = array_map(function($a){ return $a->toArray(); }, $form_type_organisations);
        $resultset["meta"]["component_count"] = count($resultset["components"]);
        $resultset["meta"]["element_count"] = count($resultset["elements"]);
        $resultset["standard_item_options"] = $standard_item_options;

        $this->dataset = $resultset;
        return true;
    }

    /**
     * Build the default form data structure.
     *
     * @return mixed
     */
    private function buildDefaultBlueprintStructure() {
        $dataset = array();
        $dataset["is_stale"] = false;
        $dataset["meta"] = array();
        $dataset["meta"]["form_blueprint_id"] = $this->form_blueprint_id;
        $dataset["meta"]["component_count"] = 0;
        $dataset["meta"]["element_count"] = 0;
        $dataset["form_blueprint"] = array();
        $dataset["form_type"] = array();
        $dataset["form_type_organisation"] = array();
        $dataset["forms"] = array(); // Forms generated by this blueprint
        $dataset["authors"] = array();
        $dataset["elements"] = array();
        $dataset["components"] = array();
        $dataset["rubrics"] = array();
        $dataset["objectives"] = array();
        $dataset["scales"] = array();
        $dataset["standard_item_options"] = array();
        return $dataset;
    }

}