<?php
class Migrate_2017_05_18_144912_558 extends Entrada_Cli_Migrate {

    private function set_blueprint_ids_on_forms() {
        $forms_api = new Entrada_Assessments_Forms(); // actorless instantiation is OK here
        $all = Models_Assessments_Form_Blueprint::fetchAllRecords(true);
        $all_form_objectives = Models_Assessments_Form_Objective::fetchAllRecords();

        foreach ($all as $bp_record) {
            // Fetch the form blueprint dataset
            $bp_data = $forms_api->fetchFormBlueprintData($bp_record->getID());
            if ($bp_data["form_blueprint"]["published"]) {
                echo "\nForm Blueprint: ({$bp_data["meta"]["form_blueprint_id"]}) is published.";
                // This blueprint is published, so we must find all the forms that were created by it and associated them via the form field
            } else {
                continue;
            }
            if (!empty($bp_data["forms"])) {
                echo "\nForms for this blueprint ({$bp_data["meta"]["form_blueprint_id"]}) are already set.";
                continue;
            }

            // Find the EPA selector component element ID
            $epa_selector_id = null;
            foreach ($bp_data["elements"] as $element_id => $element_data) {
                if ($element_data["element_type"] == "blueprint_component"
                    && $element_data["element_value"] == 1
                ) {
                    $epa_selector_id = $element_id;
                }
            }
            if (!$epa_selector_id) {
                echo "\nUNABLE TO FIND EPA SELECTOR ELEMENT ID. MALFORMED DATASET?\n";
                continue;
            }

            // Find the selected EPAs in this blueprint
            foreach ($bp_data["objectives"] as $bp_element_id => $bp_element_data) {
                if ($bp_element_id == $epa_selector_id) {
                    foreach ($bp_element_data as $bp_objective) {
                        if ($bp_objective["objective_set_shortname"] == "epa") {
                            // Find this in our list of form objectives.
                            foreach ($all_form_objectives as $form_objective) {
                                if ($form_objective->getObjectiveID() == $bp_objective["objective_id"]
                                    && $form_objective->getCourseID() == $bp_data["form_blueprint"]["course_id"]
                                ) {
                                    if ($form = Models_Assessments_Form::fetchRowByIDIncludeDeleted($form_objective->getFormID())) {
                                        if ($form->getTitle() == $bp_data["form_blueprint"]["title"]) {
                                            // Found a match, add it to our list
                                            $form_save = $form->toArray();
                                            $form_save["originating_id"] = $bp_data["form_blueprint"]["form_blueprint_id"];
                                            $form_save["origin_type"] = "blueprint";
                                            $form->fromArray($form_save)->update();
                                            echo "\nSuccessfully updated: {$form->getID()} [Added {$bp_data["form_blueprint"]["form_blueprint_id"]} / 'blueprint']";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // Our blueprints and forms should be consistent enough.
        // Now update the form objectives table to remove any forms or blueprints that are deleted or inconsitent.
        echo "\nCleaning up form objectives...";
        foreach ($all_form_objectives as $form_objective) {
            $related_form = Models_Assessments_Form::fetchRowByID($form_objective->getFormID());
            if (!$related_form) {
                // Form is deleted or doesn't exist
                $d = $form_objective->toArray();
                $d["deleted_date"] = time();
                $form_objective->fromArray($d)->update();
                continue;
            }
            if (!$related_form->getOriginatingID()
                || $related_form->getOriginType() != "blueprint"
            ) {
                // The form is not generated by an EPA (for our purposes, this means it's erroneously in the table)
                $d = $form_objective->toArray();
                $d["deleted_date"] = time();
                $form_objective->fromArray($d)->update();
                continue;
            }
            if ($related_form->getOriginatingID()
                && $related_form->getOriginType() == "blueprint"
            ) {
                $blueprint = Models_Assessments_Form_Blueprint::fetchRowByID($related_form->getOriginatingID());
                if (!$blueprint) {
                    $d = $form_objective->toArray();
                    $d["deleted_date"] = time();
                    $form_objective->fromArray($d)->update();
                    continue;
                }
            }
        }
        echo "\nForm data migration complete.\n";
    }

    /**
     * Required: SQL / PHP that performs the upgrade migration.
     */
    public function up() {
        $this->record();
        ?>
        ALTER TABLE `cbl_assessments_lu_forms` ADD `originating_id` INT(11)  NULL  DEFAULT NULL  AFTER `description`;
        ALTER TABLE `cbl_assessments_lu_forms` ADD `origin_type` ENUM('blueprint')  NULL  DEFAULT NULL  AFTER `originating_id`;
        ALTER TABLE `cbl_assessment_form_objectives` ADD `deleted_date` BIGINT(64) NULL DEFAULT NULL AFTER `course_id`;
        <?php
        $this->stop();
        $sql_status = $this->run();
        $this->set_blueprint_ids_on_forms();

        return $sql_status;

    }

    /**
     * Required: SQL / PHP that performs the downgrade migration.
     */
    public function down() {
        $this->record();
        ?>
        ALTER TABLE `cbl_assessments_lu_forms` DROP `originating_id`;
        ALTER TABLE `cbl_assessments_lu_forms` DROP `origin_type`;
        ALTER TABLE `cbl_assessment_form_objectives` DROP `deleted_date`;
        <?php
        $this->stop();
        return $this->run();
    }

    /**
     * Optional: PHP that verifies whether or not the changes outlined
     * in "up" are present in the active database.
     *
     * Return Values: -1 (not run) | 0 (changes not present or complete) | 1 (present)
     *
     * @return int
     */
    public function audit() {
        $migrate = new Models_Migration();
        if ($migrate->columnExists(DATABASE_NAME, "cbl_assessments_lu_forms", "originating_id")
            && $migrate->columnExists(DATABASE_NAME, "cbl_assessments_lu_forms", "origin_type")
            && $migrate->columnExists(DATABASE_NAME, "cbl_assessment_form_objectives", "deleted_date")
        ) {
            return 1;
        }
        return 0;
    }
}
