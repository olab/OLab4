'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}var RouteCollection=use('./RouteCollection');module.exports=function(){function PathGenerator(routes){_classCallCheck(this,PathGenerator);if(routes instanceof RouteCollection===false){throw new TypeError('PathGenerator#constructor expects its argument to be a RouteCollection object.')}this.routes=routes}_createClass(PathGenerator,[{key:'normalizePath',value:function normalizePath(path){if(path.startsWith('#')){path=path.substr(1)}if(path.startsWith('/')){path=path.substr(1)}if(path.endsWith('/')){path=path.substr(0,path.length-1)}return path}},{key:'expandPattern',value:function expandPattern(route){var pattern=route.getPattern();var collection=route.getCollection();if(collection){do{pattern=collection.getPathPrefix()+pattern}while(collection=collection.getParentCollection())}return this.normalizePath(pattern)}},{key:'isParameter',value:function isParameter(string){return /[{}]/.test(string)}},{key:'parseParameterName',value:function parseParameterName(string){return string.replace(/[{}]/g,'')}},{key:'generate',value:function generate(name){var args=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var route=this.routes.findRouteByName(name,true);var pattern=this.expandPattern(route);var defaults=route.getDefaults();var requirements=route.getRequirements();var parts=pattern.split('/');var path='';var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=parts[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var part=_step.value;if(this.isParameter(part)){var parameterName=this.parseParameterName(part);var requirement=requirements[parameterName]||null;var parameterValue=args[parameterName]||defaults[parameterName]||null;if(!requirement){throw new Error('A parameter is missing a requirement: '+parameterName)}if(!parameterValue){throw new Error('An argument is missing for parameter: '+parameterName)}if(!requirement.test(parameterValue)){throw new Error('An argument does not meet the parameter requirement: '+parameterName)}path+='/'+parameterValue}else{path+='/'+part}}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}return path}}]);return PathGenerator}();